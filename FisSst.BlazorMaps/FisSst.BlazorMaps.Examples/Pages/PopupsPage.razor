@page "/popups"

@inject IJSRuntime JsRuntime
@inject IMarkerFactory MarkerFactory

<div class="top-container">
    <h1 class="page-header">Popups</h1>
</div>

<div class="map-wrapper">
    <Map @ref="mapRef" MapOptions="@mapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Popups</h3>
    <SidePanelButton Label="add markers"
                     IconSrc="@Icons.PopupsAddMarkersIconSrc"
                     OnClick="async () => await AddMarkers()" />
    <SidePanelButton Label="bind popup"
                     IconSrc="@Icons.PopupsBindPopupIconSrc"
                     OnClick="async () => await BindPopup()" />
    <SidePanelButton Label="remove popup"
                     IconSrc="@Icons.PopupsRemovePopupIconSrc"
                     OnClick="async () => await RemovePopup()" />
    <SidePanelButton Label="update popup"
                     IconSrc="@Icons.PopupsUpdatePopupIconSrc"
                     OnClick="async () => await UpdatePopup()" />
    <SidePanelButton Label="toggle popup"
                     IconSrc="@Icons.PopupsTogglePopupIconSrc"
                     OnClick="async () => await TogglePopup()" />
    <SidePanelButton Class="button-bind-tooltip"
                     Label="bind tooltip"
                     IconSrc="@Icons.PopupsBindTooltipIconSrc"
                     OnClick="async () => await BindTooltip()" />
    <SidePanelButton Class="button-remove-tooltip"
                     Label="remove tooltip"
                     IconSrc="@Icons.PopupsRemoveTooltipIconSrc"
                     OnClick="async () => await RemoveTooltip()" />
    <SidePanelButton Class="button-update-tooltip"
                     Label="update tooltip"
                     IconSrc="@Icons.PopupsUpdateTooltipIconSrc"
                     OnClick="async () => await UpdateTooltip()" />
    <SidePanelButton Class="button-toggle-tooltip"
                     Label="toggle tooltip"
                     IconSrc="@Icons.PopupsToggleTooltipIconSrc"
                     OnClick="async () => await ToggleTooltip()" />
</div>

<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        grid-template-rows: 8vh repeat(4, 12vh);
        grid-template-columns: repeat(3, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
        }

    .button-bind-tooltip {
        grid-row: 4;
        grid-column: 1;
    }

    .button-remove-tooltip {
        grid-row: 4;
        grid-column: 2;
    }

    .button-update-tooltip {
        grid-row: 4;
        grid-column: 3;
    }

    .button-toggle-tooltip {
        grid-row: 5;
        grid-column: 1;
    }
</style>

@code {
    private static readonly LatLng center = new LatLng(50.279133, 18.685578);
    private static readonly LatLng firstMarkerLatLng = new LatLng(50.284324, 18.664683);
    private static readonly LatLng secondMarkerLatLng = new LatLng(50.285495, 18.691064);
    private static readonly LatLng thirdMarkerLatLng = new LatLng(50.279103, 18.685534);

    private Map mapRef;

    private bool firstRender = true;

    private Marker marker1;
    private Marker marker2;

    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = center,
        Zoom = 13,
        UrlTileLayer = "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
        SubOptions = new MapSubOptions()
        {
            Attribution = "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>",
            MaxZoom = 18,
            Id = "mapbox/streets-v11",
            TileSize = 512,
            ZoomOffset = -1,
            AccessToken = "pk.eyJ1Ijoia2luZ2FmaXMiLCJhIjoiY2tmZ3Zia2hpMHNtNzJyb3VlbWQweWJsdSJ9.5SH3Hdaoi6cnlxZ5SfUL5w"
        }
    };

    protected async Task AddMarkers()
    {
        if (firstRender)
        {
            this.firstRender = false;
            this.marker1 = await this.MarkerFactory.CreateAndAddToMap(firstMarkerLatLng, this.mapRef);
            this.marker2 = await this.MarkerFactory.CreateAndAddToMap(secondMarkerLatLng, this.mapRef);
        }
    }

    private async Task BindPopup()
    {
        await this.marker1.BindPopup("Hi! This is a popup");
    }

    private async Task BindTooltip()
    {
        await this.marker2.BindTooltip("And this is a tooltip");
    }

    private async Task RemovePopup()
    {
        await this.marker1.UnbindPopup();
    }

    private async Task RemoveTooltip()
    {
        await this.marker2.UnbindTooltip();
    }

    private async Task UpdatePopup()
    {
        await this.marker1.SetPopupContent("Popup has changed its content");
    }

    private async Task UpdateTooltip()
    {
        await this.marker2.SetTooltipContent("Tooltip has changed its content");
    }

    private async Task TogglePopup()
    {
        await this.marker1.TogglePopup();
    }

    private async Task ToggleTooltip()
    {
        await this.marker2.ToggleTooltip();
    }
}
@page "/events"

@inject IJSRuntime JsRuntime
@inject IMarkerFactory MarkerFactory
@inject IPolygonFactory PolygonFactory
@inject ICircleFactory CircleFactory

<div class="top-container">
    <h1 class="page-header">Events</h1>
</div>

<div class="map-wrapper">
    <Map @ref="mapRef" MapOptions="@mapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Functionalities</h3>
    <SidePanelButton Label="add markers"
                     IconSrc="@Icons.EventsAddMarkersIconSrc"
                     OnClick="async () => await AddMarkersToMap()" />
    <SidePanelButton Label="add polygon"
                     IconSrc="@Icons.EventsAddPolygonsIconSrc"
                     OnClick="async () => await AddPolygonToMap()" />
    <SidePanelButton Label="add circle"
                     IconSrc="@Icons.EventsAddCirclesIconSrc"
                     OnClick="async () => await AddCircleToMap()" />
    <SidePanelButton Label="add events to markers"
                     IconSrc="@Icons.EventsAddEventsToMarkerIconSrc"
                     OnClick="async () => await AddEventsToMarkers()" />
    <SidePanelButton Label="remove events from markers"
                     IconSrc="@Icons.EventsRemoveEventsFromMarkersIconSrc"
                     OnClick="async () => await RemoveEventsFromMarkers()" />
    <SidePanelButton Label="add events to map"
                     IconSrc="@Icons.EventsAddEventsToMapIconSrc"
                     OnClick="async () => await AddEventsToMap()" />
    <SidePanelButton Label="remove events from map"
                     IconSrc="@Icons.EventsRemoveEventsFromMapIconSrc"
                     OnClick="async () => await RemoveEventsFromMap()" />
</div>

<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        grid-template-rows: minmax(3rem, 5rem) repeat(3, 14vh);
        grid-template-columns: repeat(3, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
        }
</style>

@code {
    private static readonly LatLng center = new LatLng(50.279133, 18.685578);

    private Map mapRef;

    private Polygon polygon;

    private Circle circle;

    private Marker marker1;
    private Marker marker2;
    private Marker marker3;

    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = center,
        Zoom = 13,
        UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
            MaxZoom = 18,
            TileSize = 512,
            ZoomOffset = -1,
        }
    };

    private async Task AddMarkersToMap()
    {
        this.marker1 = await this.MarkerFactory.CreateAndAddToMap(new LatLng(50.278133, 18.683578), this.mapRef);
        this.marker2 = await this.MarkerFactory.CreateAndAddToMap(new LatLng(50.277133, 18.670578), this.mapRef);
        this.marker3 = await this.MarkerFactory.CreateAndAddToMap(new LatLng(50.255133, 18.66578), this.mapRef);
    }

    private async Task HandleMouseEvent(MouseEvent mouseEvent)
    {
        await this.JsRuntime.InvokeVoidAsync("alert", $"Event type: {mouseEvent.Type} Lat: {mouseEvent.LatLng.Lat}, Lng: {mouseEvent.LatLng.Lng}");
    }

    private async Task AddPolygonToMap()
    {
        LatLng FirstLatLng = new LatLng(50.2905456, 18.634743);
        LatLng SecondLatLng = new LatLng(50.287532, 18.615791);
        LatLng ThirdLatLng = new LatLng(50.295247, 18.579297);
        this.polygon = await this.PolygonFactory.CreateAndAddToMap(new List<LatLng> { FirstLatLng, SecondLatLng, ThirdLatLng }, this.mapRef);
        await this.polygon.OnClick(async (MouseEvent mouseEvent) => await ChangePolygonStyle());
    }

    private async Task ChangePolygonStyle()
    {
        PolygonOptions PolygonOptions = new PolygonOptions()
        {
            Weight = 5,
            Color = "green"
        };

        await this.polygon.SetStyle(PolygonOptions);
    }

    private async Task AddCircleToMap()
    {
        CircleOptions CircleOptionsInit = new CircleOptions()
        {
            Radius = 300
        };

        this.circle = await this.CircleFactory.CreateAndAddToMap(new LatLng(50.263766, 18.705137), this.mapRef, CircleOptionsInit);
        await this.circle.OnClick(async (MouseEvent mouseEvent) => await ChangeCircleStyle());
    }

    private async Task ChangeCircleStyle()
    {
        CircleOptions CircleOptions = new CircleOptions()
        {
            Color = "green"
        };

        await this.circle.SetLatLng(new LatLng(50.283783, 18.724827));
    }

    private async Task AddEventsToMarkers()
    {
        await this.marker1.OnClick(async (MouseEvent mouseEvent) => await HandleMouseEvent(mouseEvent));
        await this.marker2.OnContextMenu(async (MouseEvent mouseEvent) => await HandleMouseEvent(mouseEvent));
        await this.marker3.OnDblClick(async (MouseEvent mouseEvent) => await HandleMouseEvent(mouseEvent));
    }

    private async Task RemoveEventsFromMarkers()
    {
        await this.marker1.Off("click");
        await this.marker2.Off("contextmenu");
        await this.marker3.Off("dblclick");
    }

    private async Task AddEventsToMap()
    {
        await this.mapRef.OnClick(async (MouseEvent mouseEvent) => await HandleMouseEvent(mouseEvent));
    }

    private async Task RemoveEventsFromMap()
    {
        await this.mapRef.Off("click");
    }
}
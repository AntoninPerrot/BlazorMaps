@page "/objects"

@inject IJSRuntime JsRuntime
@inject IPolylineFactory PolylineFactory
@inject IPolygonFactory PolygonFactory
@inject ICircleMarkerFactory CircleMarkerFactory
@inject ICircleFactory CircleFactory

<div class="top-container">
    <h1 class="page-header">Objects</h1>
</div>

<div class="map-wrapper">
    <Map @ref="MapRef" MapOptions="@MapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Add</h3>
    <SidePanelButton Label="polilines"
                     IconSrc="@Icons.ObjectsAddPolilinesIconSrc"
                     OnClick="async () => await AddPolylines()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsAddCircleMarkerIconSrc"
                     OnClick="async () => await AddCircleMarkers()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsAddCirclesIconSrc"
                     OnClick="async () => await AddCircles()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsAddPolygonsIconSrc"
                     OnClick="async () => await AddPolygons()" />
    <h3 class="header">Change</h3>
    <SidePanelButton Label="polilines"
                     IconSrc="@Icons.ObjectsChangePolilinesIconSrc"
                     OnClick="async () => await ChangePolylineStyle()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsChangeCirclemarkerIconSrc"
                     OnClick="async () => await ChangeCircleMarkerStyle()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsChangeCirclesIconSrc"
                     OnClick="async () => await ChangeCircleStyle()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsChangePolygonsIconSrc"
                     OnClick="async () => await ChangePolygonStyle()" />
    <h3 class="header">Delete</h3>
    <SidePanelButton Label="polilines"
                     IconSrc="@Icons.ObjectsDeletePolilinesIconSrc"
                     OnClick="async () => await DeletePolylines()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsDeleteCirclemarkerIconSrc"
                     OnClick="async () => await DeleteCircleMarkers()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsDeleteCirclesIconSrc"
                     OnClick="async () => await DeleteCircles()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsDeletePolygonsIconSrc"
                     OnClick="async () => await DeletePolygons()" />
</div>

<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        align-items: center;
        grid-template-rows: repeat(3, 8vh 12vh);
        grid-template-columns: repeat(4, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
            font-size: 2.5vh !important;
            margin: 0 !important;
        }
</style>

@code {
    private Map MapRef;

    private Polyline Polyline1;
    private Polyline Polyline2;

    private Polygon Polygon1;
    private Polygon Polygon2;

    private CircleMarker CircleMarker1;
    private CircleMarker CircleMarker2;

    private Circle Circle1;
    private Circle Circle2;

    private static readonly LatLng FirstLatLng = new LatLng(50.284324, 18.664683);
    private static readonly LatLng SecondLatLng = new LatLng(50.285495, 18.691064);
    private static readonly LatLng ThirdLatLng = new LatLng(50.306061, 18.707469);
    private static readonly LatLng FourthLatLng = new LatLng(50.279103, 18.685534);
    private static readonly LatLng FifthLatLng = new LatLng(50.268534, 18.673535);
    private static readonly LatLng SixthLatLng = new LatLng(50.268235, 18.695198);
    private static readonly LatLng SeventhLatLng = new LatLng(50.273202, 18.705697);
    private static readonly LatLng EighthLatLng = new LatLng(50.2905456, 18.634743);
    private static readonly LatLng NinthLatLng = new LatLng(50.287532, 18.615791);
    private static readonly LatLng TenthLatLng = new LatLng(50.295247, 18.579297);
    private static readonly LatLng EleventhLatLng = new LatLng(50.298249, 18.650836);
    private static readonly LatLng TwelfthLatLng = new LatLng(50.304129, 18.635537);
    private static readonly LatLng ThirteenthLatLng = new LatLng(50.304403, 18.613286);
    private static readonly LatLng FourteenthLatLng = new LatLng(50.31915, 18.633894);
    private static readonly LatLng FifteenthLatLng = new LatLng(50.276159, 18.599046);
    private static readonly LatLng SixteenthLatLng = new LatLng(50.270142, 18.641009);
    private static readonly LatLng SeventeenthLatLng = new LatLng(50.263766, 18.705137);
    private static readonly LatLng EighteenthLatLng = new LatLng(50.283783, 18.724827);

    private MapOptions MapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(50.279133, 18.685578),
        Zoom = 13,
        UrlTileLayer = "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
        SubOptions = new MapSubOptions()
        {
            Attribution = "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>",
            MaxZoom = 18,
            Id = "mapbox/streets-v11",
            TileSize = 512,
            ZoomOffset = -1,
            AccessToken = "pk.eyJ1Ijoia2luZ2FmaXMiLCJhIjoiY2tmZ3Zia2hpMHNtNzJyb3VlbWQweWJsdSJ9.5SH3Hdaoi6cnlxZ5SfUL5w"
        }
    };

    private PolylineOptions PolylineOptions = new PolylineOptions()
    {
        Weight = 10,
        Color = "red"
    };

    private PolylineOptions PolylineOptions2 = new PolylineOptions()
    {
        Weight = 5,
        Color = "green"
    };

    private PolygonOptions PolygonOptions = new PolygonOptions()
    {
        Weight = 10,
        Color = "red"
    };

    private PolygonOptions PolygonOptions2 = new PolygonOptions()
    {
        Weight = 5,
        Color = "green"
    };

    private CircleMarkerOptions CircleMarkerOptionsInit = new CircleMarkerOptions()
    {
        Radius = 50
    };

    private CircleMarkerOptions CircleMarkerOptions = new CircleMarkerOptions()
    {
        Color = "red",
        Radius = 5
    };

    private CircleMarkerOptions CircleMarkerOptions2 = new CircleMarkerOptions()
    {
        Color = "green",
        Radius = 30
    };

    private CircleOptions CircleOptionsInit = new CircleOptions()
    {
        Radius = 100
    };

    private CircleOptions CircleOptions = new CircleOptions()
    {
        Color = "red"
    };

    private CircleOptions CircleOptions2 = new CircleOptions()
    {
        Color = "green"
    };

    private async Task AddPolylines()
    {
        Polyline1 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { FirstLatLng, SecondLatLng, ThirdLatLng }, MapRef);
        Polyline2 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { FourthLatLng, FifthLatLng }, MapRef);
    }

    private async Task ChangePolylineStyle()
    {
        await Polyline1.SetStyle(PolylineOptions);
        await Polyline2.SetStyle(PolylineOptions2);
    }

    private async Task DeletePolylines()
    {
        await Polyline1.Remove();
        await Polyline2.Remove();
    }

    private async Task AddPolygons()
    {
        Polygon1 = await this.PolygonFactory.CreateAndAddToMap(new List<LatLng> { EighthLatLng, NinthLatLng, TenthLatLng }, MapRef);
        Polygon2 = await this.PolygonFactory.CreateAndAddToMap(new List<LatLng> { EleventhLatLng, TwelfthLatLng, ThirteenthLatLng, FourteenthLatLng }, MapRef);
    }

    private async Task ChangePolygonStyle()
    {
        await Polygon1.SetStyle(PolygonOptions);
        await Polygon2.SetStyle(PolygonOptions2);
    }

    private async Task DeletePolygons()
    {
        await Polygon1.Remove();
        await Polygon2.Remove();
    }

    private async Task AddCircleMarkers()
    {
        CircleMarker1 = await this.CircleMarkerFactory.CreateAndAddToMap(FifteenthLatLng, MapRef, CircleMarkerOptionsInit);
        CircleMarker2 = await this.CircleMarkerFactory.CreateAndAddToMap(SixteenthLatLng, MapRef);
    }

    private async Task ChangeCircleMarkerStyle()
    {
        await CircleMarker1.SetStyle(CircleMarkerOptions);
        await CircleMarker2.SetStyle(CircleMarkerOptions2);
    }

    private async Task DeleteCircleMarkers()
    {
        await CircleMarker1.Remove();
        await CircleMarker2.Remove();
    }

    private async Task AddCircles()
    {
        Circle1 = await this.CircleFactory.CreateAndAddToMap(SeventeenthLatLng, MapRef, CircleOptionsInit);
        Circle2 = await this.CircleFactory.CreateAndAddToMap(EighteenthLatLng, MapRef);
    }

    private async Task ChangeCircleStyle()
    {
        await Circle1.SetStyle(CircleOptions);
        await Circle2.SetStyle(CircleOptions2);
        await Circle2.SetRadius(300);
    }

    private async Task DeleteCircles()
    {
        await Circle1.Remove();
        await Circle2.Remove();
    }
}

@page "/objects"

@inject IJSRuntime JsRuntime
@inject IPolylineFactory PolylineFactory
@inject IPolygonFactory PolygonFactory
@inject ICircleMarkerFactory CircleMarkerFactory
@inject ICircleFactory CircleFactory

<div class="top-container">
    <h1 class="page-header">Objects</h1>
</div>

<div class="map-wrapper">
    <Map @ref="mapRef" MapOptions="@mapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Add</h3>
    <SidePanelButton Label="polylines"
                     IconSrc="@Icons.ObjectsAddPolylinesIconSrc"
                     OnClick="async () => await AddPolylines()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsAddCircleMarkerIconSrc"
                     OnClick="async () => await AddCircleMarkers()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsAddCirclesIconSrc"
                     OnClick="async () => await AddCircles()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsAddPolygonsIconSrc"
                     OnClick="async () => await AddPolygons()" />
    <h3 class="header">Change</h3>
    <SidePanelButton Label="polylines"
                     IconSrc="@Icons.ObjectsChangePolylinesIconSrc"
                     OnClick="async () => await ChangePolylineStyle()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsChangeCirclemarkerIconSrc"
                     OnClick="async () => await ChangeCircleMarkerStyle()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsChangeCirclesIconSrc"
                     OnClick="async () => await ChangeCircleStyle()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsChangePolygonsIconSrc"
                     OnClick="async () => await ChangePolygonStyle()" />
    <h3 class="header">Delete</h3>
    <SidePanelButton Label="polylines"
                     IconSrc="@Icons.ObjectsDeletePolylinesIconSrc"
                     OnClick="async () => await DeletePolylines()" />
    <SidePanelButton Label="circlemarker"
                     IconSrc="@Icons.ObjectsDeleteCirclemarkerIconSrc"
                     OnClick="async () => await DeleteCircleMarkers()" />
    <SidePanelButton Label="circles"
                     IconSrc="@Icons.ObjectsDeleteCirclesIconSrc"
                     OnClick="async () => await DeleteCircles()" />
    <SidePanelButton Label="polygons"
                     IconSrc="@Icons.ObjectsDeletePolygonsIconSrc"
                     OnClick="async () => await DeletePolygons()" />
</div>

<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        align-items: center;
        grid-template-rows: repeat(3, 8vh 12vh);
        grid-template-columns: repeat(4, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
            font-size: 2.5vh !important;
            margin: 0 !important;
        }
</style>

@code {
    private static readonly LatLng center = new LatLng(50.279133, 18.685578);
    private static readonly LatLng firstLatLng = new LatLng(50.284324, 18.664683);
    private static readonly LatLng secondLatLng = new LatLng(50.285495, 18.691064);
    private static readonly LatLng thirdLatLng = new LatLng(50.306061, 18.707469);
    private static readonly LatLng fourthLatLng = new LatLng(50.279103, 18.685534);
    private static readonly LatLng fifthLatLng = new LatLng(50.268534, 18.673535);
    private static readonly LatLng sixthLatLng = new LatLng(50.268235, 18.695198);
    private static readonly LatLng seventhLatLng = new LatLng(50.273202, 18.705697);
    private static readonly LatLng eighthLatLng = new LatLng(50.2905456, 18.634743);
    private static readonly LatLng ninthLatLng = new LatLng(50.287532, 18.615791);
    private static readonly LatLng tenthLatLng = new LatLng(50.295247, 18.579297);
    private static readonly LatLng eleventhLatLng = new LatLng(50.298249, 18.650836);
    private static readonly LatLng twelfthLatLng = new LatLng(50.304129, 18.635537);
    private static readonly LatLng thirteenthLatLng = new LatLng(50.304403, 18.613286);
    private static readonly LatLng fourteenthLatLng = new LatLng(50.31915, 18.633894);
    private static readonly LatLng fifteenthLatLng = new LatLng(50.276159, 18.599046);
    private static readonly LatLng sixteenthLatLng = new LatLng(50.270142, 18.641009);
    private static readonly LatLng seventeenthLatLng = new LatLng(50.263766, 18.705137);
    private static readonly LatLng eighteenthLatLng = new LatLng(50.283783, 18.724827);

    private Map mapRef;

    private Polyline polyline1;
    private Polyline polyline2;

    private Polygon polygon1;
    private Polygon polygon2;

    private CircleMarker circleMarker1;
    private CircleMarker circleMarker2;

    private Circle circle1;
    private Circle circle2;

    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = center,
        Zoom = 13,
        UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
            MaxZoom = 18,
            TileSize = 512,
            ZoomOffset = -1,
        }
    };

    private PolylineOptions polylineOptions = new PolylineOptions()
    {
        Weight = 10,
        Color = "red"
    };

    private PolylineOptions polylineOptions2 = new PolylineOptions()
    {
        Weight = 5,
        Color = "green"
    };

    private PolygonOptions polygonOptions = new PolygonOptions()
    {
        Weight = 10,
        Color = "red"
    };

    private PolygonOptions polygonOptions2 = new PolygonOptions()
    {
        Weight = 5,
        Color = "green"
    };

    private CircleMarkerOptions circleMarkerOptionsInit = new CircleMarkerOptions()
    {
        Radius = 50
    };

    private CircleMarkerOptions circleMarkerOptions = new CircleMarkerOptions()
    {
        Color = "red",
        Radius = 5
    };

    private CircleMarkerOptions circleMarkerOptions2 = new CircleMarkerOptions()
    {
        Color = "green",
        Radius = 30
    };

    private CircleOptions circleOptionsInit = new CircleOptions()
    {
        Radius = 100
    };

    private CircleOptions circleOptions = new CircleOptions()
    {
        Color = "red"
    };

    private CircleOptions circleOptions2 = new CircleOptions()
    {
        Color = "green"
    };

    private async Task AddPolylines()
    {
        this.polyline1 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { firstLatLng, secondLatLng, thirdLatLng }, this.mapRef);
        this.polyline2 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { fourthLatLng, fifthLatLng }, this.mapRef);
    }

    private async Task ChangePolylineStyle()
    {
        await this.polyline1.SetStyle(this.polylineOptions);
        await this.polyline2.SetStyle(this.polylineOptions2);
    }

    private async Task DeletePolylines()
    {
        await this.polyline1.Remove();
        await this.polyline2.Remove();
    }

    private async Task AddPolygons()
    {
        this.polygon1 = await this.PolygonFactory.CreateAndAddToMap(new List<LatLng> { eighthLatLng, ninthLatLng, tenthLatLng }, this.mapRef);
        this.polygon2 = await this.PolygonFactory.CreateAndAddToMap(new List<LatLng> { eleventhLatLng, twelfthLatLng, thirteenthLatLng, fourteenthLatLng }, this.mapRef);
    }

    private async Task ChangePolygonStyle()
    {
        await this.polygon1.SetStyle(this.polygonOptions);
        await this.polygon2.SetStyle(this.polygonOptions2);
    }

    private async Task DeletePolygons()
    {
        await this.polygon1.Remove();
        await this.polygon2.Remove();
    }

    private async Task AddCircleMarkers()
    {
        this.circleMarker1 = await this.CircleMarkerFactory.CreateAndAddToMap(fifteenthLatLng, this.mapRef, this.circleMarkerOptionsInit);
        this.circleMarker2 = await this.CircleMarkerFactory.CreateAndAddToMap(sixteenthLatLng, this.mapRef);
    }

    private async Task ChangeCircleMarkerStyle()
    {
        await this.circleMarker1.SetStyle(this.circleMarkerOptions);
        await this.circleMarker2.SetStyle(this.circleMarkerOptions2);
    }

    private async Task DeleteCircleMarkers()
    {
        await this.circleMarker1.Remove();
        await this.circleMarker2.Remove();
    }

    private async Task AddCircles()
    {
        this.circle1 = await this.CircleFactory.CreateAndAddToMap(seventeenthLatLng, this.mapRef, circleOptionsInit);
        this.circle2 = await this.CircleFactory.CreateAndAddToMap(eighteenthLatLng, this.mapRef);
    }

    private async Task ChangeCircleStyle()
    {
        await this.circle1.SetStyle(this.circleOptions);
        await this.circle2.SetStyle(this.circleOptions2);
        await this.circle2.SetRadius(300);
    }

    private async Task DeleteCircles()
    {
        await this.circle1.Remove();
        await this.circle2.Remove();
    }
}

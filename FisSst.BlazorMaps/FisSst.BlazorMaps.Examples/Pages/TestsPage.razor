@page "/tests"

@inject IJSRuntime JsRuntime
@inject IMarkerFactory MarkerFactory
@inject IIconFactory IconFactory

@using System.Diagnostics;

<div class="top-container">
    <h1 class="page-header">Tests</h1>
</div>

<div class="map-wrapper">
    <Map @ref="MapRef" MapOptions="@MapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Measurements</h3>
    <div class="number-of-markers-input">
        <span class="number-of-markers-label">Enter the number of markers you want to add to the map</span>
        <input type="number"
               @bind="@NumberOfMarkers" />
    </div>
    <SidePanelButton Label="add markers"
                     IconSrc="@Icons.MarkersAddMarkersIconSrc"
                     OnClick="async () => await AddMarkers()" />
    <SidePanelButton Label="remove markers"
                     IconSrc="@Icons.MarkersRemoveMarkersIconSrc"
                     OnClick="async () => await RemoveMarkers()" />
    <p class="number-of-markers-output">Number of markers on the map: @markers.Count</p>
    <p class="stopwatch">Action performed in: @stopwatch.Elapsed</p>
</div>


<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        align-content: flex-start;
    }

        .side-panel .header,
        .side-panel .number-of-markers-input,
        .side-panel .number-of-markers-output,
        .side-panel .number-of-markers-label,
        .side-panel .stopwatch {
            grid-column: 1/-1;
        }

        .side-panel .header {
            margin-bottom: 2rem;
        }

        .side-panel .tile {
            margin-top: 3rem;
            margin-bottom: 2rem;
        }

        .side-panel .icon-wrapper .icon {
            height: auto;
        }
</style>

@code {
    private Map MapRef;
    private List<Marker> markers = new List<Marker>();
    private Stopwatch stopwatch = new Stopwatch();

    private double firstLat = 50.24;
    private double secondLat = 50.30;
    private double firstLng = 18.62;
    private double secondLng = 18.75;

    public int NumberOfMarkers { get; set; }

    private MapOptions MapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(50.279133, 18.685578),
        Zoom = 13,
        UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
            MaxZoom = 18,
            TileSize = 512,
            ZoomOffset = -1,
        }
    };

    private async Task AddMarkers()
    {
        this.stopwatch.Restart();
        this.stopwatch.Start();
        for (int i = 0; i < this.NumberOfMarkers; i++)
        {
            Marker marker = await this.GetRandomMarker();
            await marker.AddTo(this.MapRef);
            this.markers.Add(marker);
        }
        this.stopwatch.Stop();
        StateHasChanged();
    }

    private async Task RemoveMarkers()
    {
        this.stopwatch.Restart();
        this.stopwatch.Start();
        this.markers.ForEach(marker => marker.Remove());
        this.stopwatch.Stop();
        this.markers = new List<Marker>();
        StateHasChanged();
    }

    private async Task<Marker> GetRandomMarker()
    {
        Random random = new Random();
        double lat = random.NextDouble() * (this.secondLat - this.firstLat) + this.firstLat;
        double lng = random.NextDouble() * (this.secondLng - this.firstLng) + this.firstLng;
        return await this.MarkerFactory.Create(new LatLng(lat, lng));
    }

}
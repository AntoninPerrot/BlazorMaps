@page "/"

@inject IJSRuntime jsRuntime

<div class="top-container">
    <h1 class="page-header">Initialization</h1>
</div>

<div class="map-wrapper">
    <Map @ref="MapRef" MapOptions="@MapOptions"></Map>
</div>


<div class="side-panel">
    <h3 class="header">Functionalities</h3>
    <SidePanelButton Label="get center"
                     IconSrc="@Icons.InitializationGetCenterIconSrc"
                     OnClick="async () => await GetCenterExample()" />
    <SidePanelButton Label="set view"
                     IconSrc="@Icons.InitializationSetViewIconSrc"
                     OnClick="async () => await MapRef.SetView(Center)" />
    <SidePanelButton Label="set zoom"
                     IconSrc="@Icons.InitializationSetZoomIconSrc"
                     OnClick="async () => await MapRef.SetZoom(zoom: 16)" />
    <SidePanelButton Label="zoom in"
                     IconSrc="@Icons.InitializationZoomInIconSrc"
                     OnClick="async () => await MapRef.ZoomIn(zoomDelta: 1)" />
    <SidePanelButton Label="zoom out"
                     IconSrc="@Icons.InitializationZoomOutIconSrc"
                     OnClick="async () => await MapRef.ZoomOut(zoomDelta: 3)" />
    <SidePanelButton Label="set zoom around"
                     IconSrc="@Icons.InitializationSetZoomAroundIconSrc"
                     OnClick="async () => await MapRef.SetZoomAround(Center, zoom: 10)" />
</div>

<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        grid-template-rows: minmax(3rem, 5rem) repeat(2, 150px);
        grid-template-columns: repeat(4, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
        }

        .side-panel .icon-wrapper .icon {
            height: auto;
        }
</style>

@code {
    private Map MapRef;

    private static readonly LatLng Center = new LatLng(50.279133, 18.685578);

    private MapOptions MapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = Center,
        Zoom = 13,
        UrlTileLayer = "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
        SubOptions = new MapSubOptions()
        {
            Attribution = "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>",
            MaxZoom = 18,
            Id = "mapbox/streets-v11",
            TileSize = 512,
            ZoomOffset = -1,
            AccessToken = "pk.eyJ1Ijoia2luZ2FmaXMiLCJhIjoiY2tmZ3Zia2hpMHNtNzJyb3VlbWQweWJsdSJ9.5SH3Hdaoi6cnlxZ5SfUL5w"
        }
    };

    private async Task GetCenterExample()
    {
        LatLng center = await MapRef.GetCenter();
        await jsRuntime.InvokeAsync<string>("alert", $"Map centered at: Lat: {center.Lat}, Lng: {center.Lng}");
    }
}
@page "/objects"

@inject IJSRuntime JsRuntime
@inject IPolylineFactory PolylineFactory
@inject ICircleMarkerFactory CircleMarkerFactory
@inject ICircleFactory CircleFactory

<h1>Object example</h1>

<Map @ref="MapRef" MapOptions="@MapOptions"></Map>

<div class="col">
    <div>
        <button @onclick="async () => await AddPolylines()">Add Polylines</button>
        <button @onclick="async () => await ChangePolylineStyle()">Change Polyline Style</button>
        <button @onclick="async () => await DeletePolylines()">Delete Polylines</button>
    </div>
    <div>
        <button @onclick="async () => await AddCircleMarkers()">Add CircleMarkers</button>
        <button @onclick="async () => await ChangeCircleMarkerStyle()">Change CircleMarker Style</button>
        <button @onclick="async () => await DeleteCircleMarkers()">Delete CircleMarkers</button>
    </div>
    <div>
        <button @onclick="async () => await AddCircles()">Add Circles</button>
        <button @onclick="async () => await ChangeCircleStyle()">Change Circle Style</button>
        <button @onclick="async () => await DeleteCircles()">Delete Circles</button>
    </div>
</div>

<style>
    #mapId {
        height: 600px;
    }
</style>

@code {
    private Map MapRef;

    private Polyline Polyline1;
    private Polyline Polyline2;

    private CircleMarker CircleMarker1;
    private CircleMarker CircleMarker2;

    private Circle Circle1;
    private Circle Circle2;

    private static readonly LatLng FirstLatLng = new LatLng(50.284324, 18.664683);
    private static readonly LatLng SecondLatLng = new LatLng(50.285495, 18.691064);
    private static readonly LatLng ThirdLatLng = new LatLng(50.306061, 18.707469);
    private static readonly LatLng FourthLatLng = new LatLng(50.279103, 18.685534);
    private static readonly LatLng FifthLatLng = new LatLng(50.268534, 18.673535);

    private MapOptions MapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(50.279133, 18.685578),
        Zoom = 13,
        UrlTileLayer = "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
        SubOptions = new MapSubOptions()
        {
            Attribution = "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>",
            MaxZoom = 18,
            Id = "mapbox/streets-v11",
            TileSize = 512,
            ZoomOffset = -1,
            AccessToken = "pk.eyJ1Ijoia2luZ2FmaXMiLCJhIjoiY2tmZ3Zia2hpMHNtNzJyb3VlbWQweWJsdSJ9.5SH3Hdaoi6cnlxZ5SfUL5w"
        }
    };

    private PolylineOptions PolylineOptions = new PolylineOptions()
    {
        Weight = 10,
        Color = "red"
    };

    private PolylineOptions PolylineOptions2 = new PolylineOptions()
    {
        Weight = 5,
        Color = "green"
    };

    private CircleMarkerOptions CircleMarkerOptionsInit = new CircleMarkerOptions()
    {
        Radius = 50
    };

    private CircleMarkerOptions CircleMarkerOptions = new CircleMarkerOptions()
    {
        Color = "red",
        Radius = 5
    };

    private CircleMarkerOptions CircleMarkerOptions2 = new CircleMarkerOptions()
    {
        Color = "green",
        Radius = 30
    };

    private CircleOptions CircleOptionsInit = new CircleOptions()
    {
        Radius = 100
    };

    private CircleOptions CircleOptions = new CircleOptions()
    {
        Color = "red"
    };

    private CircleOptions CircleOptions2 = new CircleOptions()
    {
        Color = "green"
    };

    private async Task AddPolylines()
    {
        Polyline1 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { FirstLatLng, SecondLatLng, ThirdLatLng }, MapRef);
        Polyline2 = await this.PolylineFactory.CreateAndAddToMap(new List<LatLng> { FourthLatLng, FifthLatLng }, MapRef);
    }

    private async Task ChangePolylineStyle()
    {
        await Polyline1.SetStyle(PolylineOptions);
        await Polyline2.SetStyle(PolylineOptions2);
    }

    private async Task DeletePolylines()
    {
        await Polyline1.Remove();
        await Polyline2.Remove();
    }

    private async Task AddCircleMarkers()
    {
        CircleMarker1 = await this.CircleMarkerFactory.CreateAndAddToMap(FirstLatLng, MapRef, CircleMarkerOptionsInit);
        CircleMarker2 = await this.CircleMarkerFactory.CreateAndAddToMap(SecondLatLng, MapRef);
    }

    private async Task ChangeCircleMarkerStyle()
    {
        await CircleMarker1.SetStyle(CircleMarkerOptions);
        await CircleMarker2.SetStyle(CircleMarkerOptions2);
    }

    private async Task DeleteCircleMarkers()
    {
        await CircleMarker1.Remove();
        await CircleMarker2.Remove();
    }

    private async Task AddCircles()
    {
        Circle1 = await this.CircleFactory.CreateAndAddToMap(FirstLatLng, MapRef, CircleOptionsInit);
        Circle2 = await this.CircleFactory.CreateAndAddToMap(SecondLatLng, MapRef);
    }

    private async Task ChangeCircleStyle()
    {
        await Circle1.SetStyle(CircleOptions);
        await Circle2.SetStyle(CircleOptions2);
        await Circle2.SetRadius(300);
    }

    private async Task DeleteCircles()
    {
        await Circle1.Remove();
        await Circle2.Remove();
    }
}
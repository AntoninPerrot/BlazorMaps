@page "/markers"

@inject IJSRuntime JsRuntime
@inject IMarkerFactory MarkerFactory
@inject IIconFactory IconFactory

<div class="top-container">
    <h1 class="page-header">Markers</h1>
</div>

<div class="map-wrapper">
    <Map @ref="MapRef" MapOptions="@MapOptions"></Map>
</div>

<div class="side-panel">
    <h3 class="header">Functionalities</h3>
    <SidePanelButton Label="add markers"
                     IconSrc="@Icons.MARKERS_ADD_MARKERS_ICON_SRC"
                     OnClick="async () => await AddMarkers()" />
    <SidePanelButton Label="remove markers"
                     IconSrc="@Icons.MARKERS_REMOVE_MARKERS_ICON_SRC"
                     OnClick="async () => await RemoveMarkers()" />
    <SidePanelButton Label="add marker with options"
                     IconSrc="@Icons.MARKERS_ADD_MARKERS_WITH_OPTIONS_ICON_SRC"
                     OnClick="async () => await AddMarkerWithOptions()" />
    <SidePanelButton Label="remove marker with options"
                     IconSrc="@Icons.MARKERS_REMOVE_MARKERS_WITH_OPTIONS_ICON_SRC"
                     OnClick="async () => await RemoveMarkerWithOptions()" />
</div>


<style>
    .side-panel {
        min-width: 400px;
        display: grid;
        grid-template-rows: minmax(3rem, 5rem) repeat(2, 150px);
        grid-template-columns: repeat(3, 1fr);
    }

        .side-panel .header {
            grid-column: 1/-1;
        }
</style>

@code {
    private Map MapRef;

    private static readonly LatLng FirstMarkerLatLng = new LatLng(50.284324, 18.664683);
    private static readonly LatLng SecondMarkerLatLng = new LatLng(50.285495, 18.691064);
    private static readonly LatLng ThirdMarkerLatLng = new LatLng(50.279103, 18.685534);
    private static readonly LatLng MarkerWithOptionsLatLng = new LatLng(50.273103, 18.684534);

    private Marker MarkerWithOptions;

    Marker marker1 = null;
    Marker marker2 = null;
    Marker marker3 = null;

    private MapOptions MapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(50.279133, 18.685578),
        Zoom = 13,
        UrlTileLayer = "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
        SubOptions = new MapSubOptions()
        {
            Attribution = "Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a>, Imagery © <a href='https://www.mapbox.com/'>Mapbox</a>",
            MaxZoom = 18,
            Id = "mapbox/streets-v11",
            TileSize = 512,
            ZoomOffset = -1,
            AccessToken = "pk.eyJ1Ijoia2luZ2FmaXMiLCJhIjoiY2tmZ3Zia2hpMHNtNzJyb3VlbWQweWJsdSJ9.5SH3Hdaoi6cnlxZ5SfUL5w"
        }
    };

    private async Task AddMarkers()
    {
        marker1 = await this.MarkerFactory.CreateAndAddToMap(FirstMarkerLatLng, MapRef);
        marker2 = await this.MarkerFactory.CreateAndAddToMap(SecondMarkerLatLng, MapRef);
        marker3 = await this.MarkerFactory.CreateAndAddToMap(ThirdMarkerLatLng, MapRef);
    }

    private async Task RemoveMarkers()
    {
        await marker1.Remove();
        await marker2.Remove();
        await marker3.Remove();
    }

    private async Task AddMarkerWithOptions()
    {
        IconOptions iconOptions = new IconOptions()
        {
            IconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
            IconSize = new Point(38, 95),
            IconAnchor = new Point(22, 94),
            ShadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
            ShadowSize = new Point(50, 64),
            ShadowAnchor = new Point(4, 61),
            PopupAnchor = new Point(-3, -76),
        };

        MarkerOptions markerOptions = new MarkerOptions()
        {
            Opacity = 0.5,
            Draggable = true,
            IconRef = await this.IconFactory.Create(iconOptions),
        };

        this.MarkerWithOptions = await this.MarkerFactory.CreateAndAddToMap(MarkerWithOptionsLatLng, MapRef, markerOptions);
    }

    private async Task RemoveMarkerWithOptions()
    {
        await this.MarkerWithOptions.Remove();
    }
}